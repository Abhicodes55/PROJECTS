{"version":3,"file":"angular-confirmation-popover.js","sources":["../../../projects/angular-confirmation-popover/src/lib/confirmation-popover-options.provider.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover-window-options.provider.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover-window.component.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover.directive.ts","../../../projects/angular-confirmation-popover/src/lib/focus.directive.ts","../../../projects/angular-confirmation-popover/src/lib/confirmation-popover.module.ts","../../../projects/angular-confirmation-popover/src/public-api.ts","../../../projects/angular-confirmation-popover/src/angular-confirmation-popover.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nexport interface ConfirmationPopoverOptionsInterface {\n  /**\n   * The popover title\n   */\n  popoverTitle?: string;\n\n  /**\n   * The popover message\n   */\n  popoverMessage?: string;\n\n  /**\n   * The popover confirmation button text\n   */\n  confirmText?: string;\n\n  /**\n   * The popover cancel button text\n   */\n  cancelText?: string;\n\n  /**\n   * The popover confirm button type e.g. `success`, `danger` etc\n   */\n  confirmButtonType?: string;\n\n  /**\n   * The popover cancel button type  e.g. `success`, `danger` etc\n   */\n  cancelButtonType?: string;\n\n  /**\n   * The popover placement. Can be `top`, `bottom`, `left`, `right`\n   */\n  placement?: string;\n\n  /**\n   * Which button to cancel. Can be either `confirm` or `cancel`\n   */\n  focusButton?: string;\n\n  /**\n   * Whether to hide the confirmation button\n   */\n  hideConfirmButton?: boolean;\n\n  /**\n   * Whether to hide the cancel button\n   */\n  hideCancelButton?: boolean;\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  popoverClass?: string;\n\n  /**\n   * Whether to append the popover to the document body\n   */\n  appendToBody?: boolean;\n\n  /**\n   * Swap the order of the confirm and cancel buttons\n   */\n  reverseButtonOrder?: boolean;\n\n  /**\n   * Whether or not the popover should stay open when clicking outside it\n   */\n  closeOnOutsideClick?: boolean;\n}\n\n@Injectable()\nexport class ConfirmationPopoverOptions\n  implements ConfirmationPopoverOptionsInterface {\n  popoverTitle: string;\n  popoverMessage: string;\n  confirmText: string = 'Confirm';\n  cancelText: string = 'Cancel';\n  confirmButtonType: string = 'success';\n  cancelButtonType: string = 'outline-secondary';\n  placement: string = 'top';\n  focusButton: string;\n  hideConfirmButton: boolean = false;\n  hideCancelButton: boolean = false;\n  popoverClass: string = '';\n  appendToBody: boolean = false;\n  reverseButtonOrder: boolean = false;\n  closeOnOutsideClick: boolean = true;\n}\n","import { ConfirmCancelEvent } from './confirmation-popover.directive';\nimport { Injectable, TemplateRef } from '@angular/core';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\n\n/**\n * @internal\n */\n@Injectable()\nexport class ConfirmationPopoverWindowOptions extends ConfirmationPopoverOptions {\n  onConfirm: (event: ConfirmCancelEvent) => void;\n  onCancel: (event: ConfirmCancelEvent) => void;\n  onAfterViewInit: () => void;\n  customTemplate: TemplateRef<any>;\n}\n","import { Component, AfterViewInit } from '@angular/core';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\n\n/**\n * @internal\n */\n@Component({\n  selector: 'mwl-confirmation-popover-window',\n  styleUrls: ['./confirmation-popover-window.component.scss'],\n  templateUrl: './confirmation-popover-window.component.html',\n})\nexport class ConfirmationPopoverWindowComponent implements AfterViewInit {\n  constructor(public options: ConfirmationPopoverWindowOptions) {}\n\n  ngAfterViewInit(): void {\n    this.options.onAfterViewInit();\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  ComponentRef,\n  OnDestroy,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  Injector,\n  ComponentFactoryResolver,\n  Renderer2,\n  TemplateRef,\n  ComponentFactory,\n  SimpleChanges,\n} from '@angular/core';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\nimport { ConfirmationPopoverWindowOptions } from './confirmation-popover-window-options.provider';\nimport { positionElements } from 'positioning';\n\n/**\n * @internal\n */\nexport interface ConfirmCancelEvent {\n  clickEvent: MouseEvent;\n}\n\n/**\n All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n ```html\n <button\n   class=\"btn btn-outline-secondary\"\n   mwlConfirmationPopover\n   [popoverTitle]=\"popoverTitle\"\n   [popoverMessage]=\"popoverMessage\"\n   placement=\"left\"\n   (confirm)=\"confirmClicked = true\"\n   (cancel)=\"cancelClicked = true\"\n   [(isOpen)]=\"isOpen\">\n    Show confirm popover!\n  </button>\n  ```\n */\n@Directive({\n  selector: '[mwlConfirmationPopover]',\n})\nexport class ConfirmationPopoverDirective\n  implements OnDestroy, OnChanges, OnInit {\n  /**\n   * The title of the popover\n   */\n  @Input() popoverTitle: string;\n\n  /**\n   * The body text of the popover.\n   */\n  @Input() popoverMessage: string;\n\n  /**\n   * The text of the confirm button. Default `Confirm`\n   */\n  @Input() confirmText: string;\n\n  /**\n   * The text of the cancel button. Default `Cancel`\n   */\n  @Input() cancelText: string;\n\n  /**\n   * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n   */\n  @Input() placement: string;\n\n  /**\n   * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `success`\n   */\n  @Input() confirmButtonType: string;\n\n  /**\n   * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `default`\n   */\n  @Input() cancelButtonType: string;\n\n  /**\n   * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n   * If omitted, by default it will not focus either button.\n   */\n  @Input() focusButton: string;\n\n  /**\n   * Whether to hide the confirm button. Default `false`.\n   */\n  @Input() hideConfirmButton: boolean;\n\n  /**\n   * Whether to hide the cancel button. Default `false`.\n   */\n  @Input() hideCancelButton: boolean;\n\n  /**\n   * Whether to disable showing the popover. Default `false`.\n   */\n  @Input() isDisabled: boolean = false;\n\n  /**\n   * Will open or show the popover when changed.\n   * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n   */\n  @Input() isOpen: boolean = false;\n\n  /**\n   * A reference to a <ng-template> tag that if set will override the popovers template. Use like so:\n   * ```html\n   * <ng-template #customTemplate let-options=\"options\">\n   *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n   *     My custom template\n   *   </div>\n   * </ng-template>\n   * ```\n   *\n   * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]=\"customTemplate\"`\n   */\n  @Input() customTemplate: TemplateRef<any>;\n\n  /**\n   * Will emit when the popover is opened or closed\n   */\n  @Output() isOpenChange: EventEmitter<boolean> = new EventEmitter(true);\n\n  /**\n   * An expression that is called when the confirm button is clicked.\n   */\n  @Output() confirm: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * An expression that is called when the cancel button is clicked.\n   */\n  @Output() cancel: EventEmitter<ConfirmCancelEvent> = new EventEmitter();\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n  @Input() popoverClass: string;\n\n  /**\n   * Append the element to the document body rather than the trigger element\n   */\n  @Input() appendToBody: boolean;\n\n  /**\n   * Swap the order of the confirm and cancel buttons\n   */\n  @Input() reverseButtonOrder: boolean;\n\n  /**\n   * Determines whether or not the popover should stay open even when clicking outside of it\n   */\n  @Input() closeOnOutsideClick: boolean;\n\n  /**\n   * @internal\n   */\n  popover: ComponentRef<ConfirmationPopoverWindowComponent>;\n\n  private eventListeners: (() => void)[] = [];\n\n  /**\n   * @internal\n   */\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private elm: ElementRef,\n    private defaultOptions: ConfirmationPopoverOptions,\n    private cfr: ComponentFactoryResolver,\n    private renderer: Renderer2\n  ) {}\n\n  /**\n   * @internal\n   */\n  ngOnInit(): void {\n    this.isOpenChange.emit(false);\n  }\n\n  /**\n   * @internal\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.isOpen) {\n      if (changes.isOpen.currentValue === true) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  ngOnDestroy() {\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  onConfirm(event: ConfirmCancelEvent) {\n    this.confirm.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  onCancel(event: ConfirmCancelEvent) {\n    this.cancel.emit(event);\n    this.hidePopover();\n  }\n\n  /**\n   * @internal\n   */\n  @HostListener('click')\n  togglePopover(): void {\n    if (!this.popover) {\n      this.showPopover();\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  private onDocumentClick(event: Event): void {\n    const closeOnOutsideClick =\n      typeof this.closeOnOutsideClick !== 'undefined'\n        ? this.closeOnOutsideClick\n        : this.defaultOptions.closeOnOutsideClick;\n    if (\n      this.popover &&\n      !this.elm.nativeElement.contains(event.target) &&\n      !this.popover.location.nativeElement.contains(event.target) &&\n      closeOnOutsideClick\n    ) {\n      this.hidePopover();\n    }\n  }\n\n  private showPopover(): void {\n    if (!this.popover && !this.isDisabled) {\n      // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n      // otherwise the document click event gets fired after the click event\n      // that triggered the popover to open (no idea why this is so)\n      setTimeout(() => {\n        this.eventListeners = [\n          this.renderer.listen('document', 'click', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('document', 'touchend', (event: Event) =>\n            this.onDocumentClick(event)\n          ),\n          this.renderer.listen('window', 'resize', () =>\n            this.positionPopover()\n          ),\n        ];\n      });\n\n      const options = new ConfirmationPopoverWindowOptions();\n      Object.assign(options, this.defaultOptions, {\n        onConfirm: (event: ConfirmCancelEvent): void => {\n          this.onConfirm(event);\n        },\n        onCancel: (event: ConfirmCancelEvent): void => {\n          this.onCancel(event);\n        },\n        onAfterViewInit: (): void => {\n          this.positionPopover();\n        },\n      });\n\n      const optionalParams: (keyof ConfirmationPopoverDirective)[] = [\n        'confirmText',\n        'cancelText',\n        'placement',\n        'confirmButtonType',\n        'cancelButtonType',\n        'focusButton',\n        'hideConfirmButton',\n        'hideCancelButton',\n        'popoverClass',\n        'appendToBody',\n        'customTemplate',\n        'reverseButtonOrder',\n        'popoverTitle',\n        'popoverMessage',\n      ];\n      optionalParams.forEach((param) => {\n        if (typeof this[param] !== 'undefined') {\n          (options as any)[param] = this[param];\n        }\n      });\n\n      const componentFactory: ComponentFactory<ConfirmationPopoverWindowComponent> = this.cfr.resolveComponentFactory(\n        ConfirmationPopoverWindowComponent\n      );\n      const childInjector = Injector.create({\n        providers: [\n          {\n            provide: ConfirmationPopoverWindowOptions,\n            useValue: options,\n          },\n        ],\n      });\n      this.popover = this.viewContainerRef.createComponent(\n        componentFactory,\n        this.viewContainerRef.length,\n        childInjector\n      );\n      if (options.appendToBody) {\n        document.body.appendChild(this.popover.location.nativeElement);\n      }\n      this.isOpenChange.emit(true);\n    }\n  }\n\n  private positionPopover(): void {\n    if (this.popover) {\n      const popoverElement = this.popover.location.nativeElement.children[0];\n      positionElements(\n        this.elm.nativeElement,\n        popoverElement,\n        this.placement || this.defaultOptions.placement,\n        this.appendToBody || this.defaultOptions.appendToBody\n      );\n    }\n  }\n\n  private hidePopover(): void {\n    if (this.popover) {\n      this.popover.destroy();\n      delete this.popover;\n      this.isOpenChange.emit(false);\n      this.eventListeners.forEach((fn) => fn());\n      this.eventListeners = [];\n    }\n  }\n}\n","import {\n  Directive,\n  ElementRef,\n  Input,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\n\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\n@Directive({\n  selector: '[mwlFocus]',\n})\nexport class FocusDirective implements OnChanges {\n  @Input() mwlFocus: boolean;\n\n  constructor(private elm: ElementRef) {}\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.mwlFocus && this.mwlFocus === true) {\n      this.elm.nativeElement.focus();\n    }\n  }\n}\n","import { NgModule, ModuleWithProviders, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConfirmationPopoverDirective } from './confirmation-popover.directive';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { FocusDirective } from './focus.directive';\nimport {\n  ConfirmationPopoverOptions,\n  ConfirmationPopoverOptionsInterface,\n} from './confirmation-popover-options.provider';\n\nexport const USER_OPTIONS: InjectionToken<string> = new InjectionToken(\n  'confirmation popover user options'\n);\n\nexport function optionsFactory(\n  userOptions: ConfirmationPopoverOptions\n): ConfirmationPopoverOptions {\n  const options = new ConfirmationPopoverOptions();\n  Object.assign(options, userOptions);\n  return options;\n}\n\n@NgModule({\n  declarations: [\n    ConfirmationPopoverDirective,\n    ConfirmationPopoverWindowComponent,\n    FocusDirective,\n  ],\n  imports: [CommonModule],\n  exports: [ConfirmationPopoverDirective, FocusDirective],\n  entryComponents: [ConfirmationPopoverWindowComponent],\n})\nexport class ConfirmationPopoverModule {\n  static forRoot(\n    options: ConfirmationPopoverOptionsInterface = {}\n  ): ModuleWithProviders<ConfirmationPopoverModule> {\n    return {\n      ngModule: ConfirmationPopoverModule,\n      providers: [\n        {\n          provide: USER_OPTIONS,\n          useValue: options,\n        },\n        {\n          provide: ConfirmationPopoverOptions,\n          useFactory: optionsFactory,\n          deps: [USER_OPTIONS],\n        },\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of angular-confirmation-popover\n */\n\nexport { ConfirmationPopoverModule } from './lib/confirmation-popover.module';\nexport { ConfirmationPopoverDirective } from './lib/confirmation-popover.directive';\nexport { FocusDirective } from './lib/focus.directive';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {ConfirmationPopoverOptions as ɵc} from './lib/confirmation-popover-options.provider';\nexport {ConfirmationPopoverWindowOptions as ɵe} from './lib/confirmation-popover-window-options.provider';\nexport {ConfirmationPopoverWindowComponent as ɵd} from './lib/confirmation-popover-window.component';\nexport {USER_OPTIONS as ɵa,optionsFactory as ɵb} from './lib/confirmation-popover.module';"]}