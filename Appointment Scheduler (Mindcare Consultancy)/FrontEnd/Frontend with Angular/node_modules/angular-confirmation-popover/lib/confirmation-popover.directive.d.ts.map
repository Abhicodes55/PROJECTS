{"version":3,"file":"confirmation-popover.directive.d.ts","sources":["confirmation-popover.directive.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, ViewContainerRef, ComponentRef, OnDestroy, ElementRef, OnChanges, OnInit, ComponentFactoryResolver, Renderer2, TemplateRef, SimpleChanges } from '@angular/core';\nimport { ConfirmationPopoverWindowComponent } from './confirmation-popover-window.component';\nimport { ConfirmationPopoverOptions } from './confirmation-popover-options.provider';\n/**\n * @internal\n */\nexport interface ConfirmCancelEvent {\n    clickEvent: MouseEvent;\n}\n/**\n All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n ```html\n <button\n   class=\"btn btn-outline-secondary\"\n   mwlConfirmationPopover\n   [popoverTitle]=\"popoverTitle\"\n   [popoverMessage]=\"popoverMessage\"\n   placement=\"left\"\n   (confirm)=\"confirmClicked = true\"\n   (cancel)=\"cancelClicked = true\"\n   [(isOpen)]=\"isOpen\">\n    Show confirm popover!\n  </button>\n  ```\n */\nexport declare class ConfirmationPopoverDirective implements OnDestroy, OnChanges, OnInit {\n    private viewContainerRef;\n    private elm;\n    private defaultOptions;\n    private cfr;\n    private renderer;\n    /**\n     * The title of the popover\n     */\n    popoverTitle: string;\n    /**\n     * The body text of the popover.\n     */\n    popoverMessage: string;\n    /**\n     * The text of the confirm button. Default `Confirm`\n     */\n    confirmText: string;\n    /**\n     * The text of the cancel button. Default `Cancel`\n     */\n    cancelText: string;\n    /**\n     * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n     */\n    placement: string;\n    /**\n     * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n     * e.g. `default`, `warning`, `danger` etc. Default `success`\n     */\n    confirmButtonType: string;\n    /**\n     * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n     * e.g. `default`, `warning`, `danger` etc. Default `default`\n     */\n    cancelButtonType: string;\n    /**\n     * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n     * If omitted, by default it will not focus either button.\n     */\n    focusButton: string;\n    /**\n     * Whether to hide the confirm button. Default `false`.\n     */\n    hideConfirmButton: boolean;\n    /**\n     * Whether to hide the cancel button. Default `false`.\n     */\n    hideCancelButton: boolean;\n    /**\n     * Whether to disable showing the popover. Default `false`.\n     */\n    isDisabled: boolean;\n    /**\n     * Will open or show the popover when changed.\n     * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n     */\n    isOpen: boolean;\n    /**\n     * A reference to a <ng-template> tag that if set will override the popovers template. Use like so:\n     * ```html\n     * <ng-template #customTemplate let-options=\"options\">\n     *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n     *     My custom template\n     *   </div>\n     * </ng-template>\n     * ```\n     *\n     * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]=\"customTemplate\"`\n     */\n    customTemplate: TemplateRef<any>;\n    /**\n     * Will emit when the popover is opened or closed\n     */\n    isOpenChange: EventEmitter<boolean>;\n    /**\n     * An expression that is called when the confirm button is clicked.\n     */\n    confirm: EventEmitter<ConfirmCancelEvent>;\n    /**\n     * An expression that is called when the cancel button is clicked.\n     */\n    cancel: EventEmitter<ConfirmCancelEvent>;\n    /**\n     * A custom CSS class to be added to the popover\n     */\n    popoverClass: string;\n    /**\n     * Append the element to the document body rather than the trigger element\n     */\n    appendToBody: boolean;\n    /**\n     * Swap the order of the confirm and cancel buttons\n     */\n    reverseButtonOrder: boolean;\n    /**\n     * Determines whether or not the popover should stay open even when clicking outside of it\n     */\n    closeOnOutsideClick: boolean;\n    /**\n     * @internal\n     */\n    popover: ComponentRef<ConfirmationPopoverWindowComponent>;\n    private eventListeners;\n    /**\n     * @internal\n     */\n    constructor(viewContainerRef: ViewContainerRef, elm: ElementRef, defaultOptions: ConfirmationPopoverOptions, cfr: ComponentFactoryResolver, renderer: Renderer2);\n    /**\n     * @internal\n     */\n    ngOnInit(): void;\n    /**\n     * @internal\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * @internal\n     */\n    ngOnDestroy(): void;\n    /**\n     * @internal\n     */\n    onConfirm(event: ConfirmCancelEvent): void;\n    /**\n     * @internal\n     */\n    onCancel(event: ConfirmCancelEvent): void;\n    /**\n     * @internal\n     */\n    togglePopover(): void;\n    private onDocumentClick;\n    private showPopover;\n    private positionPopover;\n    private hidePopover;\n}\n"]}